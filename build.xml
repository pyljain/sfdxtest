<project name="Sample usage of Salesforce Ant tasks" default="test" basedir="." xmlns:sf="antlib:com.salesforce">

    <property file="build.properties"/>
    <property environment="env"/>

    <!-- Setting default value for username, password and session id properties to empty string
         so unset values are treated as empty. Without this, ant expressions such as ${sf.username}
         will be treated literally.
    -->
    <condition property="sf.username" value=""> <not> <isset property="sf.username"/> </not> </condition>
    <condition property="sf.password" value=""> <not> <isset property="sf.password"/> </not> </condition>
    <condition property="sf.sessionId" value=""> <not> <isset property="sf.sessionId"/> </not> </condition>

    <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
        <classpath>
            <pathelement location="ant-salesforce.jar" />
        </classpath>
    </taskdef>


 <!-- Test out deploy and retrieve verbs for package 'mypkg' -->
    <target name="deployprod">
      <cleanXMLs />
      <!-- Upload the contents of the "mypkg" package -->
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="mdapi" rollbackOnError="true"/>
    </target>

    <!-- Test out deploy and retrieve verbs for package 'mypkg' -->
    <target name="test">
      <!-- Upload the contents of the "mypkg" package -->
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="mypkg" rollbackOnError="true"/>
      <mkdir dir="retrieveOutput"/>
      <!-- Retrieve the contents into another directory -->
      <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="retrieveOutput" packageNames="MyPkg"/>
    </target>

    <!-- Retrieve an unpackaged set of metadata from your org -->
    <!-- The file unpackaged/package.xml lists what is to be retrieved -->
    <target name="retrieveUnpackaged">
      <mkdir dir="retrieveUnpackaged"/>
      <!-- Retrieve the contents into another directory -->
      <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="retrieveUnpackaged" unpackaged="unpackaged/package.xml"/>
    </target>

    <!-- Retrieve all the items of a particular metadata type -->
    <target name="bulkRetrieve">
      <sf:bulkRetrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" metadataType="${sf.metadataType}" retrieveTarget="retrieveUnpackaged"/>
    </target>

    <!-- Retrieve metadata for all the packages specified under packageNames -->
    <target name="retrievePkg">
      <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="retrieveOutput" packageNames="${sf.pkgName}"/>
    </target>

    <!-- Deploy the unpackaged set of metadata retrieved with retrieveUnpackaged and run tests in this organization's namespace only-->
    <target name="deployUnpackaged">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="retrieveUnpackaged" rollbackOnError="true"/>
    </target>

    <!-- Deploy a zip of metadata files to the org -->
    <target name="deployZip">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" zipFile="${sf.zipFile}" pollWaitMillis="1000" rollbackOnError="true"/>
    </target>

    <!-- Shows deploying code & running tests for code in directory -->
    <target name="deployCode">
      <!-- Upload the contents of the "codepkg" directory, running the tests for just 1 class -->
      <sf:deploy username="${sf.sit.username}" password="${sf.sit.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="src" testLevel="NoTestRun" rollbackOnError="true">
      </sf:deploy>
    </target>

    <!-- Shows deploying code & running tests for code in directory -->
    <target name="validateCode">
      <!-- Upload the contents of the "codepkg" directory, running the tests for just 1 class -->
      <sf:deploy username="${sf.sit.username}" password="${sf.sit.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="src" testLevel="NoTestRun" rollbackOnError="true" checkOnly="true">
      </sf:deploy>
    </target>

	 <!-- Shows deploying code with no TestLevel sepcified -->
    <target name="deployCodeNoTestLevelSpecified">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" rollbackOnError="true"/>
    </target>

	<!-- Shows deploying code and running tests only within the org namespace -->
	<target name="deployCodeRunLocalTests">
	  <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" rollbackOnError="true"  testlevel="RunLocalTests"/>
	</target>

    <!-- Shows removing code; only succeeds if done after deployCode -->
    <target name="undeployCode">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="removecodepkg"/>
    </target>

    <!-- Shows retrieving code; only succeeds if done after deployCode -->
    <target name="retrieveCode">
      <!-- Retrieve the contents listed in the file codepkg/package.xml into the codepkg directory -->
      <delete dir="src" />
      <mkdir dir="src" />
      <sf:retrieve username="${sf.dev.username}" password="${sf.dev.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="src" unpackaged="package.xml"/>
    </target>

    <!-- Shows deploying code, running all tests, and running tests (1 of which fails), and logging. -->
    <target name="deployCodeFailingTest">
      <!-- Upload the contents of the "codepkg" package, running all tests -->
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" testLevel="RunAllTestsInOrg" rollbackOnError="true" logType="Debugonly"/>
    </target>

    <!-- Shows check only; never actually saves to the server -->
    <target name="deployCodeCheckOnly">
      <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" checkOnly="true"/>
    </target>

	<!-- Shows quick deployment of recent validation. Set the property sf.recentValidationId to your recent check only deployment Id -->
	<target name="quickDeploy">
	  <sf:deployRecentValidation  username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" recentValidationId="${sf.recentValidationId}"/>
	</target>

	<!-- Shows cancel deployment of deploy request either pending or in progress. Set property sf.requestId to Id of pending or in progress deploy request -->
	<target name="cancelDeploy">
	  <sf:cancelDeploy  username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" requestId="${sf.requestId}"/>
	</target>

	<!-- Retrieve the information of all items of a particular metadata type -->
    <target name="listMetadata">
      <sf:listMetadata username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}" metadataType="${sf.metadataType}"/>
    </target>

	<!-- Retrieve the information on all supported metadata type -->
    <target name="describeMetadata">
      <sf:describeMetadata username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${sf.serverurl}"/>
    </target>

  <macrodef name="cleanXMLs">
    <sequential>
      <!-- Replace ContentWorkspaces in Profiles for Spring '17 -->
      <replaceregexp flags="g">
        <regexp pattern="[\r\n\t\s]*&lt;userPermissions&gt;[\r\n\t\s]*&lt;enabled&gt;true&lt;/enabled&gt;[\r\n\t\s]*&lt;name&gt;AllowUniversalSearch&lt;/name&gt;[\r\n\t\s]*&lt;/userPermissions&gt;"/>
        <substitution expression=""/>
        <fileset dir="./mdapi/profiles">
          <include name="*.profile" />
        </fileset>
      </replaceregexp>

       <!-- Replace ContentWorkspaces in Profiles for Spring '17 -->
      <replaceregexp flags="g">
        <regexp pattern="[\r\n\t\s]*&lt;userPermissions&gt;[\r\n\t\s]*&lt;enabled&gt;true&lt;/enabled&gt;[\r\n\t\s]*&lt;name&gt;AllowViewKnowledge&lt;/name&gt;[\r\n\t\s]*&lt;/userPermissions&gt;"/>
        <substitution expression=""/>
        <fileset dir="./mdapi/profiles">
          <include name="*.profile" />
        </fileset>
      </replaceregexp>

      <replaceregexp flags="g">
        <regexp pattern="[\r\n\t\s]*&lt;userPermissions&gt;[\r\n\t\s]*&lt;enabled&gt;true&lt;/enabled&gt;[\r\n\t\s]*&lt;name&gt;BulkMacrosAllowed&lt;/name&gt;[\r\n\t\s]*&lt;/userPermissions&gt;"/>
        <substitution expression=""/>
        <fileset dir="./mdapi/profiles">
          <include name="*.profile" />
        </fileset>
      </replaceregexp>

      <replaceregexp flags="g">
        <regexp pattern="[\r\n\t\s]*&lt;userPermissions&gt;[\r\n\t\s]*&lt;enabled&gt;true&lt;/enabled&gt;[\r\n\t\s]*&lt;name&gt;ManageEncryptionKeys&lt;/name&gt;[\r\n\t\s]*&lt;/userPermissions&gt;"/>
        <substitution expression=""/>
        <fileset dir="./mdapi/profiles">
          <include name="*.profile" />
        </fileset>
      </replaceregexp>

      <replaceregexp flags="g">
        <regexp pattern="[\r\n\t\s]*&lt;userPermissions&gt;[\r\n\t\s]*&lt;enabled&gt;true&lt;/enabled&gt;[\r\n\t\s]*&lt;name&gt;EditKnowledge&lt;/name&gt;[\r\n\t\s]*&lt;/userPermissions&gt;"/>
        <substitution expression=""/>
        <fileset dir="./mdapi/profiles">
          <include name="*.profile" />
        </fileset>
      </replaceregexp>

      <replaceregexp flags="g">
        <regexp pattern="[\r\n\t\s]*&lt;userPermissions&gt;[\r\n\t\s]*&lt;enabled&gt;true&lt;/enabled&gt;[\r\n\t\s]*&lt;name&gt;SubmitMacrosAllowed&lt;/name&gt;[\r\n\t\s]*&lt;/userPermissions&gt;"/>
        <substitution expression=""/>
        <fileset dir="./mdapi/profiles">
          <include name="*.profile" />
        </fileset>
      </replaceregexp>

      <replaceregexp flags="g">
        <regexp pattern="[\r\n\t\s]*&lt;userPermissions&gt;[\r\n\t\s]*&lt;enabled&gt;true&lt;/enabled&gt;[\r\n\t\s]*&lt;name&gt;FieldServiceAccess&lt;/name&gt;[\r\n\t\s]*&lt;/userPermissions&gt;"/>
        <substitution expression=""/>
        <fileset dir="./mdapi/profiles">
          <include name="*.profile" />
        </fileset>
      </replaceregexp>

      <replaceregexp flags="g">
        <regexp pattern="[\r\n\t\s]*&lt;userPermissions&gt;[\r\n\t\s]*&lt;enabled&gt;true&lt;/enabled&gt;[\r\n\t\s]*&lt;name&gt;ManageKnowledge&lt;/name&gt;[\r\n\t\s]*&lt;/userPermissions&gt;"/>
        <substitution expression=""/>
        <fileset dir="./mdapi/profiles">
          <include name="*.profile" />
        </fileset>
      </replaceregexp>

      <replaceregexp flags="g">
        <regexp pattern="[\r\n\t\s]*&lt;userPermissions&gt;[\r\n\t\s]*&lt;enabled&gt;true&lt;/enabled&gt;[\r\n\t\s]*&lt;name&gt;ManageKnowledgeImportExport&lt;/name&gt;[\r\n\t\s]*&lt;/userPermissions&gt;"/>
        <substitution expression=""/>
        <fileset dir="./mdapi/profiles">
          <include name="*.profile" />
        </fileset>
      </replaceregexp>

      <replaceregexp flags="g">
        <regexp pattern="[\r\n\t\s]*&lt;userPermissions&gt;[\r\n\t\s]*&lt;enabled&gt;true&lt;/enabled&gt;[\r\n\t\s]*&lt;name&gt;ManageSearchPromotionRules&lt;/name&gt;[\r\n\t\s]*&lt;/userPermissions&gt;"/>
        <substitution expression=""/>
        <fileset dir="./mdapi/profiles">
          <include name="*.profile" />
        </fileset>
      </replaceregexp>

      <replaceregexp flags="g">
        <regexp pattern="[\r\n\t\s]*&lt;userPermissions&gt;[\r\n\t\s]*&lt;enabled&gt;true&lt;/enabled&gt;[\r\n\t\s]*&lt;name&gt;SendExternalEmailAvailable&lt;/name&gt;[\r\n\t\s]*&lt;/userPermissions&gt;"/>
        <substitution expression=""/>
        <fileset dir="./mdapi/profiles">
          <include name="*.profile" />
        </fileset>
      </replaceregexp>

      <replaceregexp flags="g">
        <regexp pattern="[\r\n\t\s]*&lt;userPermissions&gt;[\r\n\t\s]*&lt;enabled&gt;true&lt;/enabled&gt;[\r\n\t\s]*&lt;name&gt;ShareInternalArticles&lt;/name&gt;[\r\n\t\s]*&lt;/userPermissions&gt;"/>
        <substitution expression=""/>
        <fileset dir="./mdapi/profiles">
          <include name="*.profile" />
        </fileset>
      </replaceregexp>

      <replaceregexp flags="g">
        <regexp pattern="[\r\n\t\s]*&lt;userPermissions&gt;[\r\n\t\s]*&lt;enabled&gt;true&lt;/enabled&gt;[\r\n\t\s]*&lt;name&gt;WorkCalibrationUser&lt;/name&gt;[\r\n\t\s]*&lt;/userPermissions&gt;"/>
        <substitution expression=""/>
        <fileset dir="./mdapi/profiles">
          <include name="*.profile" />
        </fileset>
      </replaceregexp>
    </sequential>
  </macrodef>

</project>
